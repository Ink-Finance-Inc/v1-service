// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"inkfinance.xyz/dal/model"
)

func newKeyValueController(db *gorm.DB) keyValueController {
	_keyValueController := keyValueController{}

	_keyValueController.keyValueControllerDo.UseDB(db)
	_keyValueController.keyValueControllerDo.UseModel(&model.KeyValueController{})

	tableName := _keyValueController.keyValueControllerDo.TableName()
	_keyValueController.ALL = field.NewField(tableName, "*")
	_keyValueController.ID = field.NewInt32(tableName, "id")
	_keyValueController.KeyIs = field.NewString(tableName, "key_is")
	_keyValueController.ValueIs = field.NewString(tableName, "value_is")

	_keyValueController.fillFieldMap()

	return _keyValueController
}

type keyValueController struct {
	keyValueControllerDo keyValueControllerDo

	ALL     field.Field
	ID      field.Int32
	KeyIs   field.String
	ValueIs field.String

	fieldMap map[string]field.Expr
}

func (k keyValueController) Table(newTableName string) *keyValueController {
	k.keyValueControllerDo.UseTable(newTableName)
	return k.updateTableName(newTableName)
}

func (k keyValueController) As(alias string) *keyValueController {
	k.keyValueControllerDo.DO = *(k.keyValueControllerDo.As(alias).(*gen.DO))
	return k.updateTableName(alias)
}

func (k *keyValueController) updateTableName(table string) *keyValueController {
	k.ALL = field.NewField(table, "*")
	k.ID = field.NewInt32(table, "id")
	k.KeyIs = field.NewString(table, "key_is")
	k.ValueIs = field.NewString(table, "value_is")

	k.fillFieldMap()

	return k
}

func (k *keyValueController) WithContext(ctx context.Context) *keyValueControllerDo {
	return k.keyValueControllerDo.WithContext(ctx)
}

func (k keyValueController) TableName() string { return k.keyValueControllerDo.TableName() }

func (k keyValueController) Alias() string { return k.keyValueControllerDo.Alias() }

func (k *keyValueController) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := k.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (k *keyValueController) fillFieldMap() {
	k.fieldMap = make(map[string]field.Expr, 3)
	k.fieldMap["id"] = k.ID
	k.fieldMap["key_is"] = k.KeyIs
	k.fieldMap["value_is"] = k.ValueIs
}

func (k keyValueController) clone(db *gorm.DB) keyValueController {
	k.keyValueControllerDo.ReplaceDB(db)
	return k
}

type keyValueControllerDo struct{ gen.DO }

func (k keyValueControllerDo) Debug() *keyValueControllerDo {
	return k.withDO(k.DO.Debug())
}

func (k keyValueControllerDo) WithContext(ctx context.Context) *keyValueControllerDo {
	return k.withDO(k.DO.WithContext(ctx))
}

func (k keyValueControllerDo) Clauses(conds ...clause.Expression) *keyValueControllerDo {
	return k.withDO(k.DO.Clauses(conds...))
}

func (k keyValueControllerDo) Returning(value interface{}, columns ...string) *keyValueControllerDo {
	return k.withDO(k.DO.Returning(value, columns...))
}

func (k keyValueControllerDo) Not(conds ...gen.Condition) *keyValueControllerDo {
	return k.withDO(k.DO.Not(conds...))
}

func (k keyValueControllerDo) Or(conds ...gen.Condition) *keyValueControllerDo {
	return k.withDO(k.DO.Or(conds...))
}

func (k keyValueControllerDo) Select(conds ...field.Expr) *keyValueControllerDo {
	return k.withDO(k.DO.Select(conds...))
}

func (k keyValueControllerDo) Where(conds ...gen.Condition) *keyValueControllerDo {
	return k.withDO(k.DO.Where(conds...))
}

func (k keyValueControllerDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *keyValueControllerDo {
	return k.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (k keyValueControllerDo) Order(conds ...field.Expr) *keyValueControllerDo {
	return k.withDO(k.DO.Order(conds...))
}

func (k keyValueControllerDo) Distinct(cols ...field.Expr) *keyValueControllerDo {
	return k.withDO(k.DO.Distinct(cols...))
}

func (k keyValueControllerDo) Omit(cols ...field.Expr) *keyValueControllerDo {
	return k.withDO(k.DO.Omit(cols...))
}

func (k keyValueControllerDo) Join(table schema.Tabler, on ...field.Expr) *keyValueControllerDo {
	return k.withDO(k.DO.Join(table, on...))
}

func (k keyValueControllerDo) LeftJoin(table schema.Tabler, on ...field.Expr) *keyValueControllerDo {
	return k.withDO(k.DO.LeftJoin(table, on...))
}

func (k keyValueControllerDo) RightJoin(table schema.Tabler, on ...field.Expr) *keyValueControllerDo {
	return k.withDO(k.DO.RightJoin(table, on...))
}

func (k keyValueControllerDo) Group(cols ...field.Expr) *keyValueControllerDo {
	return k.withDO(k.DO.Group(cols...))
}

func (k keyValueControllerDo) Having(conds ...gen.Condition) *keyValueControllerDo {
	return k.withDO(k.DO.Having(conds...))
}

func (k keyValueControllerDo) Limit(limit int) *keyValueControllerDo {
	return k.withDO(k.DO.Limit(limit))
}

func (k keyValueControllerDo) Offset(offset int) *keyValueControllerDo {
	return k.withDO(k.DO.Offset(offset))
}

func (k keyValueControllerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *keyValueControllerDo {
	return k.withDO(k.DO.Scopes(funcs...))
}

func (k keyValueControllerDo) Unscoped() *keyValueControllerDo {
	return k.withDO(k.DO.Unscoped())
}

func (k keyValueControllerDo) Create(values ...*model.KeyValueController) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Create(values)
}

func (k keyValueControllerDo) CreateInBatches(values []*model.KeyValueController, batchSize int) error {
	return k.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (k keyValueControllerDo) Save(values ...*model.KeyValueController) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Save(values)
}

func (k keyValueControllerDo) First() (*model.KeyValueController, error) {
	if result, err := k.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.KeyValueController), nil
	}
}

func (k keyValueControllerDo) Take() (*model.KeyValueController, error) {
	if result, err := k.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.KeyValueController), nil
	}
}

func (k keyValueControllerDo) Last() (*model.KeyValueController, error) {
	if result, err := k.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.KeyValueController), nil
	}
}

func (k keyValueControllerDo) Find() ([]*model.KeyValueController, error) {
	result, err := k.DO.Find()
	return result.([]*model.KeyValueController), err
}

func (k keyValueControllerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.KeyValueController, err error) {
	buf := make([]*model.KeyValueController, 0, batchSize)
	err = k.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (k keyValueControllerDo) FindInBatches(result *[]*model.KeyValueController, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return k.DO.FindInBatches(result, batchSize, fc)
}

func (k keyValueControllerDo) Attrs(attrs ...field.AssignExpr) *keyValueControllerDo {
	return k.withDO(k.DO.Attrs(attrs...))
}

func (k keyValueControllerDo) Assign(attrs ...field.AssignExpr) *keyValueControllerDo {
	return k.withDO(k.DO.Assign(attrs...))
}

func (k keyValueControllerDo) Joins(field field.RelationField) *keyValueControllerDo {
	return k.withDO(k.DO.Joins(field))
}

func (k keyValueControllerDo) Preload(field field.RelationField) *keyValueControllerDo {
	return k.withDO(k.DO.Preload(field))
}

func (k keyValueControllerDo) FirstOrInit() (*model.KeyValueController, error) {
	if result, err := k.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.KeyValueController), nil
	}
}

func (k keyValueControllerDo) FirstOrCreate() (*model.KeyValueController, error) {
	if result, err := k.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.KeyValueController), nil
	}
}

func (k keyValueControllerDo) FindByPage(offset int, limit int) (result []*model.KeyValueController, count int64, err error) {
	result, err = k.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = k.Offset(-1).Limit(-1).Count()
	return
}

func (k keyValueControllerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = k.Count()
	if err != nil {
		return
	}

	err = k.Offset(offset).Limit(limit).Scan(result)
	return
}

func (k *keyValueControllerDo) withDO(do gen.Dao) *keyValueControllerDo {
	k.DO = *do.(*gen.DO)
	return k
}
