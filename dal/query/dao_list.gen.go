// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"inkfinance.xyz/dal/model"
)

func newDaoList(db *gorm.DB) daoList {
	_daoList := daoList{}

	_daoList.daoListDo.UseDB(db)
	_daoList.daoListDo.UseModel(&model.DaoList{})

	tableName := _daoList.daoListDo.TableName()
	_daoList.ALL = field.NewField(tableName, "*")
	_daoList.ID = field.NewInt32(tableName, "id")
	_daoList.DaoAddress = field.NewString(tableName, "dao_address")
	_daoList.AdminWallet = field.NewString(tableName, "admin_wallet")
	_daoList.BlockHeight = field.NewInt64(tableName, "block_height")
	_daoList.BlockTime = field.NewInt64(tableName, "block_time")

	_daoList.fillFieldMap()

	return _daoList
}

type daoList struct {
	daoListDo daoListDo

	ALL         field.Field
	ID          field.Int32
	DaoAddress  field.String
	AdminWallet field.String
	BlockHeight field.Int64
	BlockTime   field.Int64

	fieldMap map[string]field.Expr
}

func (d daoList) Table(newTableName string) *daoList {
	d.daoListDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d daoList) As(alias string) *daoList {
	d.daoListDo.DO = *(d.daoListDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *daoList) updateTableName(table string) *daoList {
	d.ALL = field.NewField(table, "*")
	d.ID = field.NewInt32(table, "id")
	d.DaoAddress = field.NewString(table, "dao_address")
	d.AdminWallet = field.NewString(table, "admin_wallet")
	d.BlockHeight = field.NewInt64(table, "block_height")
	d.BlockTime = field.NewInt64(table, "block_time")

	d.fillFieldMap()

	return d
}

func (d *daoList) WithContext(ctx context.Context) *daoListDo { return d.daoListDo.WithContext(ctx) }

func (d daoList) TableName() string { return d.daoListDo.TableName() }

func (d daoList) Alias() string { return d.daoListDo.Alias() }

func (d *daoList) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *daoList) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 5)
	d.fieldMap["id"] = d.ID
	d.fieldMap["dao_address"] = d.DaoAddress
	d.fieldMap["admin_wallet"] = d.AdminWallet
	d.fieldMap["block_height"] = d.BlockHeight
	d.fieldMap["block_time"] = d.BlockTime
}

func (d daoList) clone(db *gorm.DB) daoList {
	d.daoListDo.ReplaceDB(db)
	return d
}

type daoListDo struct{ gen.DO }

func (d daoListDo) Debug() *daoListDo {
	return d.withDO(d.DO.Debug())
}

func (d daoListDo) WithContext(ctx context.Context) *daoListDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d daoListDo) Clauses(conds ...clause.Expression) *daoListDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d daoListDo) Returning(value interface{}, columns ...string) *daoListDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d daoListDo) Not(conds ...gen.Condition) *daoListDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d daoListDo) Or(conds ...gen.Condition) *daoListDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d daoListDo) Select(conds ...field.Expr) *daoListDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d daoListDo) Where(conds ...gen.Condition) *daoListDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d daoListDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *daoListDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d daoListDo) Order(conds ...field.Expr) *daoListDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d daoListDo) Distinct(cols ...field.Expr) *daoListDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d daoListDo) Omit(cols ...field.Expr) *daoListDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d daoListDo) Join(table schema.Tabler, on ...field.Expr) *daoListDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d daoListDo) LeftJoin(table schema.Tabler, on ...field.Expr) *daoListDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d daoListDo) RightJoin(table schema.Tabler, on ...field.Expr) *daoListDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d daoListDo) Group(cols ...field.Expr) *daoListDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d daoListDo) Having(conds ...gen.Condition) *daoListDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d daoListDo) Limit(limit int) *daoListDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d daoListDo) Offset(offset int) *daoListDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d daoListDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *daoListDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d daoListDo) Unscoped() *daoListDo {
	return d.withDO(d.DO.Unscoped())
}

func (d daoListDo) Create(values ...*model.DaoList) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d daoListDo) CreateInBatches(values []*model.DaoList, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d daoListDo) Save(values ...*model.DaoList) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d daoListDo) First() (*model.DaoList, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DaoList), nil
	}
}

func (d daoListDo) Take() (*model.DaoList, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DaoList), nil
	}
}

func (d daoListDo) Last() (*model.DaoList, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DaoList), nil
	}
}

func (d daoListDo) Find() ([]*model.DaoList, error) {
	result, err := d.DO.Find()
	return result.([]*model.DaoList), err
}

func (d daoListDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DaoList, err error) {
	buf := make([]*model.DaoList, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d daoListDo) FindInBatches(result *[]*model.DaoList, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d daoListDo) Attrs(attrs ...field.AssignExpr) *daoListDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d daoListDo) Assign(attrs ...field.AssignExpr) *daoListDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d daoListDo) Joins(field field.RelationField) *daoListDo {
	return d.withDO(d.DO.Joins(field))
}

func (d daoListDo) Preload(field field.RelationField) *daoListDo {
	return d.withDO(d.DO.Preload(field))
}

func (d daoListDo) FirstOrInit() (*model.DaoList, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DaoList), nil
	}
}

func (d daoListDo) FirstOrCreate() (*model.DaoList, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DaoList), nil
	}
}

func (d daoListDo) FindByPage(offset int, limit int) (result []*model.DaoList, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d daoListDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d *daoListDo) withDO(do gen.Dao) *daoListDo {
	d.DO = *do.(*gen.DO)
	return d
}
