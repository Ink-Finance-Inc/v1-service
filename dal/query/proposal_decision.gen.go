// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"inkfinance.xyz/dal/model"
)

func newProposalDecision(db *gorm.DB) proposalDecision {
	_proposalDecision := proposalDecision{}

	_proposalDecision.proposalDecisionDo.UseDB(db)
	_proposalDecision.proposalDecisionDo.UseModel(&model.ProposalDecision{})

	tableName := _proposalDecision.proposalDecisionDo.TableName()
	_proposalDecision.ALL = field.NewField(tableName, "*")
	_proposalDecision.ID = field.NewInt32(tableName, "id")
	_proposalDecision.DaoAddress = field.NewString(tableName, "dao_address")
	_proposalDecision.ProposalID = field.NewString(tableName, "proposal_id")
	_proposalDecision.Subcategory = field.NewString(tableName, "subcategory")
	_proposalDecision.UpdateTime = field.NewTime(tableName, "update_time")
	_proposalDecision.Agree = field.NewInt32(tableName, "agree")
	_proposalDecision.NewProposalHeight = field.NewInt64(tableName, "new_proposal_height")
	_proposalDecision.AuditPeriod = field.NewInt32(tableName, "audit_period")
	_proposalDecision.AgreeTime = field.NewInt64(tableName, "agree_time")
	_proposalDecision.Category = field.NewString(tableName, "category")
	_proposalDecision.Expiration = field.NewInt64(tableName, "expiration")
	_proposalDecision.ProposalTitle = field.NewString(tableName, "proposal_title")

	_proposalDecision.fillFieldMap()

	return _proposalDecision
}

type proposalDecision struct {
	proposalDecisionDo proposalDecisionDo

	ALL               field.Field
	ID                field.Int32
	DaoAddress        field.String
	ProposalID        field.String
	Subcategory       field.String
	UpdateTime        field.Time
	Agree             field.Int32
	NewProposalHeight field.Int64
	AuditPeriod       field.Int32
	AgreeTime         field.Int64
	Category          field.String
	Expiration        field.Int64
	ProposalTitle     field.String

	fieldMap map[string]field.Expr
}

func (p proposalDecision) Table(newTableName string) *proposalDecision {
	p.proposalDecisionDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p proposalDecision) As(alias string) *proposalDecision {
	p.proposalDecisionDo.DO = *(p.proposalDecisionDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *proposalDecision) updateTableName(table string) *proposalDecision {
	p.ALL = field.NewField(table, "*")
	p.ID = field.NewInt32(table, "id")
	p.DaoAddress = field.NewString(table, "dao_address")
	p.ProposalID = field.NewString(table, "proposal_id")
	p.Subcategory = field.NewString(table, "subcategory")
	p.UpdateTime = field.NewTime(table, "update_time")
	p.Agree = field.NewInt32(table, "agree")
	p.NewProposalHeight = field.NewInt64(table, "new_proposal_height")
	p.AuditPeriod = field.NewInt32(table, "audit_period")
	p.AgreeTime = field.NewInt64(table, "agree_time")
	p.Category = field.NewString(table, "category")
	p.Expiration = field.NewInt64(table, "expiration")
	p.ProposalTitle = field.NewString(table, "proposal_title")

	p.fillFieldMap()

	return p
}

func (p *proposalDecision) WithContext(ctx context.Context) *proposalDecisionDo {
	return p.proposalDecisionDo.WithContext(ctx)
}

func (p proposalDecision) TableName() string { return p.proposalDecisionDo.TableName() }

func (p proposalDecision) Alias() string { return p.proposalDecisionDo.Alias() }

func (p *proposalDecision) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *proposalDecision) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 12)
	p.fieldMap["id"] = p.ID
	p.fieldMap["dao_address"] = p.DaoAddress
	p.fieldMap["proposal_id"] = p.ProposalID
	p.fieldMap["subcategory"] = p.Subcategory
	p.fieldMap["update_time"] = p.UpdateTime
	p.fieldMap["agree"] = p.Agree
	p.fieldMap["new_proposal_height"] = p.NewProposalHeight
	p.fieldMap["audit_period"] = p.AuditPeriod
	p.fieldMap["agree_time"] = p.AgreeTime
	p.fieldMap["category"] = p.Category
	p.fieldMap["expiration"] = p.Expiration
	p.fieldMap["proposal_title"] = p.ProposalTitle
}

func (p proposalDecision) clone(db *gorm.DB) proposalDecision {
	p.proposalDecisionDo.ReplaceDB(db)
	return p
}

type proposalDecisionDo struct{ gen.DO }

func (p proposalDecisionDo) Debug() *proposalDecisionDo {
	return p.withDO(p.DO.Debug())
}

func (p proposalDecisionDo) WithContext(ctx context.Context) *proposalDecisionDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p proposalDecisionDo) Clauses(conds ...clause.Expression) *proposalDecisionDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p proposalDecisionDo) Returning(value interface{}, columns ...string) *proposalDecisionDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p proposalDecisionDo) Not(conds ...gen.Condition) *proposalDecisionDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p proposalDecisionDo) Or(conds ...gen.Condition) *proposalDecisionDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p proposalDecisionDo) Select(conds ...field.Expr) *proposalDecisionDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p proposalDecisionDo) Where(conds ...gen.Condition) *proposalDecisionDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p proposalDecisionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *proposalDecisionDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p proposalDecisionDo) Order(conds ...field.Expr) *proposalDecisionDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p proposalDecisionDo) Distinct(cols ...field.Expr) *proposalDecisionDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p proposalDecisionDo) Omit(cols ...field.Expr) *proposalDecisionDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p proposalDecisionDo) Join(table schema.Tabler, on ...field.Expr) *proposalDecisionDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p proposalDecisionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *proposalDecisionDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p proposalDecisionDo) RightJoin(table schema.Tabler, on ...field.Expr) *proposalDecisionDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p proposalDecisionDo) Group(cols ...field.Expr) *proposalDecisionDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p proposalDecisionDo) Having(conds ...gen.Condition) *proposalDecisionDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p proposalDecisionDo) Limit(limit int) *proposalDecisionDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p proposalDecisionDo) Offset(offset int) *proposalDecisionDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p proposalDecisionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *proposalDecisionDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p proposalDecisionDo) Unscoped() *proposalDecisionDo {
	return p.withDO(p.DO.Unscoped())
}

func (p proposalDecisionDo) Create(values ...*model.ProposalDecision) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p proposalDecisionDo) CreateInBatches(values []*model.ProposalDecision, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p proposalDecisionDo) Save(values ...*model.ProposalDecision) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p proposalDecisionDo) First() (*model.ProposalDecision, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProposalDecision), nil
	}
}

func (p proposalDecisionDo) Take() (*model.ProposalDecision, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProposalDecision), nil
	}
}

func (p proposalDecisionDo) Last() (*model.ProposalDecision, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProposalDecision), nil
	}
}

func (p proposalDecisionDo) Find() ([]*model.ProposalDecision, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProposalDecision), err
}

func (p proposalDecisionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProposalDecision, err error) {
	buf := make([]*model.ProposalDecision, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p proposalDecisionDo) FindInBatches(result *[]*model.ProposalDecision, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p proposalDecisionDo) Attrs(attrs ...field.AssignExpr) *proposalDecisionDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p proposalDecisionDo) Assign(attrs ...field.AssignExpr) *proposalDecisionDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p proposalDecisionDo) Joins(field field.RelationField) *proposalDecisionDo {
	return p.withDO(p.DO.Joins(field))
}

func (p proposalDecisionDo) Preload(field field.RelationField) *proposalDecisionDo {
	return p.withDO(p.DO.Preload(field))
}

func (p proposalDecisionDo) FirstOrInit() (*model.ProposalDecision, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProposalDecision), nil
	}
}

func (p proposalDecisionDo) FirstOrCreate() (*model.ProposalDecision, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProposalDecision), nil
	}
}

func (p proposalDecisionDo) FindByPage(offset int, limit int) (result []*model.ProposalDecision, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p proposalDecisionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p *proposalDecisionDo) withDO(do gen.Dao) *proposalDecisionDo {
	p.DO = *do.(*gen.DO)
	return p
}
