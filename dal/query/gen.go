// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

func Use(db *gorm.DB) *Query {
	return &Query{
		db:                     db,
		AuditReport:            newAuditReport(db),
		ContractEventsProgress: newContractEventsProgress(db),
		DaoList:                newDaoList(db),
		DaoUcvMapping:          newDaoUcvMapping(db),
		ExecuteMessage:         newExecuteMessage(db),
		KeyValueCache:          newKeyValueCache(db),
		ProposalDecision:       newProposalDecision(db),
		ProposalStatus:         newProposalStatus(db),
		ScheduleInfo:           newScheduleInfo(db),
		ScheduleMemberInfo:     newScheduleMemberInfo(db),
		ScheduleSignedInfo:     newScheduleSignedInfo(db),
		ScheduleWithdrawLog:    newScheduleWithdrawLog(db),
		SocialInfo:             newSocialInfo(db),
		User:                   newUser(db),
	}
}

type Query struct {
	db *gorm.DB

	AuditReport            auditReport
	ContractEventsProgress contractEventsProgress
	DaoList                daoList
	DaoUcvMapping          daoUcvMapping
	ExecuteMessage         executeMessage
	KeyValueCache          keyValueCache
	ProposalDecision       proposalDecision
	ProposalStatus         proposalStatus
	ScheduleInfo           scheduleInfo
	ScheduleMemberInfo     scheduleMemberInfo
	ScheduleSignedInfo     scheduleSignedInfo
	ScheduleWithdrawLog    scheduleWithdrawLog
	SocialInfo             socialInfo
	User                   user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                     db,
		AuditReport:            q.AuditReport.clone(db),
		ContractEventsProgress: q.ContractEventsProgress.clone(db),
		DaoList:                q.DaoList.clone(db),
		DaoUcvMapping:          q.DaoUcvMapping.clone(db),
		ExecuteMessage:         q.ExecuteMessage.clone(db),
		KeyValueCache:          q.KeyValueCache.clone(db),
		ProposalDecision:       q.ProposalDecision.clone(db),
		ProposalStatus:         q.ProposalStatus.clone(db),
		ScheduleInfo:           q.ScheduleInfo.clone(db),
		ScheduleMemberInfo:     q.ScheduleMemberInfo.clone(db),
		ScheduleSignedInfo:     q.ScheduleSignedInfo.clone(db),
		ScheduleWithdrawLog:    q.ScheduleWithdrawLog.clone(db),
		SocialInfo:             q.SocialInfo.clone(db),
		User:                   q.User.clone(db),
	}
}

type queryCtx struct {
	AuditReport            auditReportDo
	ContractEventsProgress contractEventsProgressDo
	DaoList                daoListDo
	DaoUcvMapping          daoUcvMappingDo
	ExecuteMessage         executeMessageDo
	KeyValueCache          keyValueCacheDo
	ProposalDecision       proposalDecisionDo
	ProposalStatus         proposalStatusDo
	ScheduleInfo           scheduleInfoDo
	ScheduleMemberInfo     scheduleMemberInfoDo
	ScheduleSignedInfo     scheduleSignedInfoDo
	ScheduleWithdrawLog    scheduleWithdrawLogDo
	SocialInfo             socialInfoDo
	User                   userDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AuditReport:            *q.AuditReport.WithContext(ctx),
		ContractEventsProgress: *q.ContractEventsProgress.WithContext(ctx),
		DaoList:                *q.DaoList.WithContext(ctx),
		DaoUcvMapping:          *q.DaoUcvMapping.WithContext(ctx),
		ExecuteMessage:         *q.ExecuteMessage.WithContext(ctx),
		KeyValueCache:          *q.KeyValueCache.WithContext(ctx),
		ProposalDecision:       *q.ProposalDecision.WithContext(ctx),
		ProposalStatus:         *q.ProposalStatus.WithContext(ctx),
		ScheduleInfo:           *q.ScheduleInfo.WithContext(ctx),
		ScheduleMemberInfo:     *q.ScheduleMemberInfo.WithContext(ctx),
		ScheduleSignedInfo:     *q.ScheduleSignedInfo.WithContext(ctx),
		ScheduleWithdrawLog:    *q.ScheduleWithdrawLog.WithContext(ctx),
		SocialInfo:             *q.SocialInfo.WithContext(ctx),
		User:                   *q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
