// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"inkfinance.xyz/dal/model"
)

func newScheduleWithdrawLog(db *gorm.DB) scheduleWithdrawLog {
	_scheduleWithdrawLog := scheduleWithdrawLog{}

	_scheduleWithdrawLog.scheduleWithdrawLogDo.UseDB(db)
	_scheduleWithdrawLog.scheduleWithdrawLogDo.UseModel(&model.ScheduleWithdrawLog{})

	tableName := _scheduleWithdrawLog.scheduleWithdrawLogDo.TableName()
	_scheduleWithdrawLog.ALL = field.NewField(tableName, "*")
	_scheduleWithdrawLog.ID = field.NewInt32(tableName, "id")
	_scheduleWithdrawLog.ScheduleID = field.NewInt32(tableName, "schedule_id")
	_scheduleWithdrawLog.MemberAddress = field.NewString(tableName, "member_address")
	_scheduleWithdrawLog.TokenAddress = field.NewString(tableName, "token_address")
	_scheduleWithdrawLog.ClaimAmount = field.NewString(tableName, "claim_amount")
	_scheduleWithdrawLog.CreateTime = field.NewInt64(tableName, "create_time")
	_scheduleWithdrawLog.DaoAddress = field.NewString(tableName, "dao_address")
	_scheduleWithdrawLog.CurrentTimeID = field.NewInt32(tableName, "current_time_id")
	_scheduleWithdrawLog.BlockHeight = field.NewInt64(tableName, "block_height")

	_scheduleWithdrawLog.fillFieldMap()

	return _scheduleWithdrawLog
}

type scheduleWithdrawLog struct {
	scheduleWithdrawLogDo scheduleWithdrawLogDo

	ALL           field.Field
	ID            field.Int32
	ScheduleID    field.Int32
	MemberAddress field.String
	TokenAddress  field.String
	ClaimAmount   field.String
	CreateTime    field.Int64
	DaoAddress    field.String
	CurrentTimeID field.Int32
	BlockHeight   field.Int64

	fieldMap map[string]field.Expr
}

func (s scheduleWithdrawLog) Table(newTableName string) *scheduleWithdrawLog {
	s.scheduleWithdrawLogDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scheduleWithdrawLog) As(alias string) *scheduleWithdrawLog {
	s.scheduleWithdrawLogDo.DO = *(s.scheduleWithdrawLogDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scheduleWithdrawLog) updateTableName(table string) *scheduleWithdrawLog {
	s.ALL = field.NewField(table, "*")
	s.ID = field.NewInt32(table, "id")
	s.ScheduleID = field.NewInt32(table, "schedule_id")
	s.MemberAddress = field.NewString(table, "member_address")
	s.TokenAddress = field.NewString(table, "token_address")
	s.ClaimAmount = field.NewString(table, "claim_amount")
	s.CreateTime = field.NewInt64(table, "create_time")
	s.DaoAddress = field.NewString(table, "dao_address")
	s.CurrentTimeID = field.NewInt32(table, "current_time_id")
	s.BlockHeight = field.NewInt64(table, "block_height")

	s.fillFieldMap()

	return s
}

func (s *scheduleWithdrawLog) WithContext(ctx context.Context) *scheduleWithdrawLogDo {
	return s.scheduleWithdrawLogDo.WithContext(ctx)
}

func (s scheduleWithdrawLog) TableName() string { return s.scheduleWithdrawLogDo.TableName() }

func (s scheduleWithdrawLog) Alias() string { return s.scheduleWithdrawLogDo.Alias() }

func (s *scheduleWithdrawLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scheduleWithdrawLog) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["id"] = s.ID
	s.fieldMap["schedule_id"] = s.ScheduleID
	s.fieldMap["member_address"] = s.MemberAddress
	s.fieldMap["token_address"] = s.TokenAddress
	s.fieldMap["claim_amount"] = s.ClaimAmount
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["dao_address"] = s.DaoAddress
	s.fieldMap["current_time_id"] = s.CurrentTimeID
	s.fieldMap["block_height"] = s.BlockHeight
}

func (s scheduleWithdrawLog) clone(db *gorm.DB) scheduleWithdrawLog {
	s.scheduleWithdrawLogDo.ReplaceDB(db)
	return s
}

type scheduleWithdrawLogDo struct{ gen.DO }

func (s scheduleWithdrawLogDo) Debug() *scheduleWithdrawLogDo {
	return s.withDO(s.DO.Debug())
}

func (s scheduleWithdrawLogDo) WithContext(ctx context.Context) *scheduleWithdrawLogDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scheduleWithdrawLogDo) Clauses(conds ...clause.Expression) *scheduleWithdrawLogDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scheduleWithdrawLogDo) Returning(value interface{}, columns ...string) *scheduleWithdrawLogDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scheduleWithdrawLogDo) Not(conds ...gen.Condition) *scheduleWithdrawLogDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scheduleWithdrawLogDo) Or(conds ...gen.Condition) *scheduleWithdrawLogDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scheduleWithdrawLogDo) Select(conds ...field.Expr) *scheduleWithdrawLogDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scheduleWithdrawLogDo) Where(conds ...gen.Condition) *scheduleWithdrawLogDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scheduleWithdrawLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *scheduleWithdrawLogDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s scheduleWithdrawLogDo) Order(conds ...field.Expr) *scheduleWithdrawLogDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scheduleWithdrawLogDo) Distinct(cols ...field.Expr) *scheduleWithdrawLogDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scheduleWithdrawLogDo) Omit(cols ...field.Expr) *scheduleWithdrawLogDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scheduleWithdrawLogDo) Join(table schema.Tabler, on ...field.Expr) *scheduleWithdrawLogDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scheduleWithdrawLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) *scheduleWithdrawLogDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scheduleWithdrawLogDo) RightJoin(table schema.Tabler, on ...field.Expr) *scheduleWithdrawLogDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scheduleWithdrawLogDo) Group(cols ...field.Expr) *scheduleWithdrawLogDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scheduleWithdrawLogDo) Having(conds ...gen.Condition) *scheduleWithdrawLogDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scheduleWithdrawLogDo) Limit(limit int) *scheduleWithdrawLogDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scheduleWithdrawLogDo) Offset(offset int) *scheduleWithdrawLogDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scheduleWithdrawLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *scheduleWithdrawLogDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scheduleWithdrawLogDo) Unscoped() *scheduleWithdrawLogDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scheduleWithdrawLogDo) Create(values ...*model.ScheduleWithdrawLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scheduleWithdrawLogDo) CreateInBatches(values []*model.ScheduleWithdrawLog, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scheduleWithdrawLogDo) Save(values ...*model.ScheduleWithdrawLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scheduleWithdrawLogDo) First() (*model.ScheduleWithdrawLog, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScheduleWithdrawLog), nil
	}
}

func (s scheduleWithdrawLogDo) Take() (*model.ScheduleWithdrawLog, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScheduleWithdrawLog), nil
	}
}

func (s scheduleWithdrawLogDo) Last() (*model.ScheduleWithdrawLog, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScheduleWithdrawLog), nil
	}
}

func (s scheduleWithdrawLogDo) Find() ([]*model.ScheduleWithdrawLog, error) {
	result, err := s.DO.Find()
	return result.([]*model.ScheduleWithdrawLog), err
}

func (s scheduleWithdrawLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScheduleWithdrawLog, err error) {
	buf := make([]*model.ScheduleWithdrawLog, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scheduleWithdrawLogDo) FindInBatches(result *[]*model.ScheduleWithdrawLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scheduleWithdrawLogDo) Attrs(attrs ...field.AssignExpr) *scheduleWithdrawLogDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scheduleWithdrawLogDo) Assign(attrs ...field.AssignExpr) *scheduleWithdrawLogDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scheduleWithdrawLogDo) Joins(field field.RelationField) *scheduleWithdrawLogDo {
	return s.withDO(s.DO.Joins(field))
}

func (s scheduleWithdrawLogDo) Preload(field field.RelationField) *scheduleWithdrawLogDo {
	return s.withDO(s.DO.Preload(field))
}

func (s scheduleWithdrawLogDo) FirstOrInit() (*model.ScheduleWithdrawLog, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScheduleWithdrawLog), nil
	}
}

func (s scheduleWithdrawLogDo) FirstOrCreate() (*model.ScheduleWithdrawLog, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScheduleWithdrawLog), nil
	}
}

func (s scheduleWithdrawLogDo) FindByPage(offset int, limit int) (result []*model.ScheduleWithdrawLog, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scheduleWithdrawLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s *scheduleWithdrawLogDo) withDO(do gen.Dao) *scheduleWithdrawLogDo {
	s.DO = *do.(*gen.DO)
	return s
}
