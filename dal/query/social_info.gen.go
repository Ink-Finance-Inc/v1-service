// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"inkfinance.xyz/dal/model"
)

func newSocialInfo(db *gorm.DB) socialInfo {
	_socialInfo := socialInfo{}

	_socialInfo.socialInfoDo.UseDB(db)
	_socialInfo.socialInfoDo.UseModel(&model.SocialInfo{})

	tableName := _socialInfo.socialInfoDo.TableName()
	_socialInfo.ALL = field.NewField(tableName, "*")
	_socialInfo.ID = field.NewInt32(tableName, "id")
	_socialInfo.SocialAccount = field.NewString(tableName, "social_account")
	_socialInfo.MediaType = field.NewString(tableName, "media_type")
	_socialInfo.UserID = field.NewInt32(tableName, "user_id")
	_socialInfo.CreateTime = field.NewTime(tableName, "create_time")
	_socialInfo.Valid = field.NewInt32(tableName, "valid")
	_socialInfo.MainAccounts = field.NewString(tableName, "main_accounts")
	_socialInfo.ChainType = field.NewString(tableName, "chain_type")
	_socialInfo.ChainID = field.NewInt32(tableName, "chain_id")

	_socialInfo.fillFieldMap()

	return _socialInfo
}

type socialInfo struct {
	socialInfoDo socialInfoDo

	ALL           field.Field
	ID            field.Int32
	SocialAccount field.String
	MediaType     field.String
	UserID        field.Int32
	CreateTime    field.Time
	Valid         field.Int32
	MainAccounts  field.String
	ChainType     field.String
	ChainID       field.Int32

	fieldMap map[string]field.Expr
}

func (s socialInfo) Table(newTableName string) *socialInfo {
	s.socialInfoDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s socialInfo) As(alias string) *socialInfo {
	s.socialInfoDo.DO = *(s.socialInfoDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *socialInfo) updateTableName(table string) *socialInfo {
	s.ALL = field.NewField(table, "*")
	s.ID = field.NewInt32(table, "id")
	s.SocialAccount = field.NewString(table, "social_account")
	s.MediaType = field.NewString(table, "media_type")
	s.UserID = field.NewInt32(table, "user_id")
	s.CreateTime = field.NewTime(table, "create_time")
	s.Valid = field.NewInt32(table, "valid")
	s.MainAccounts = field.NewString(table, "main_accounts")
	s.ChainType = field.NewString(table, "chain_type")
	s.ChainID = field.NewInt32(table, "chain_id")

	s.fillFieldMap()

	return s
}

func (s *socialInfo) WithContext(ctx context.Context) *socialInfoDo {
	return s.socialInfoDo.WithContext(ctx)
}

func (s socialInfo) TableName() string { return s.socialInfoDo.TableName() }

func (s socialInfo) Alias() string { return s.socialInfoDo.Alias() }

func (s *socialInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *socialInfo) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["id"] = s.ID
	s.fieldMap["social_account"] = s.SocialAccount
	s.fieldMap["media_type"] = s.MediaType
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["valid"] = s.Valid
	s.fieldMap["main_accounts"] = s.MainAccounts
	s.fieldMap["chain_type"] = s.ChainType
	s.fieldMap["chain_id"] = s.ChainID
}

func (s socialInfo) clone(db *gorm.DB) socialInfo {
	s.socialInfoDo.ReplaceDB(db)
	return s
}

type socialInfoDo struct{ gen.DO }

func (s socialInfoDo) Debug() *socialInfoDo {
	return s.withDO(s.DO.Debug())
}

func (s socialInfoDo) WithContext(ctx context.Context) *socialInfoDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s socialInfoDo) Clauses(conds ...clause.Expression) *socialInfoDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s socialInfoDo) Returning(value interface{}, columns ...string) *socialInfoDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s socialInfoDo) Not(conds ...gen.Condition) *socialInfoDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s socialInfoDo) Or(conds ...gen.Condition) *socialInfoDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s socialInfoDo) Select(conds ...field.Expr) *socialInfoDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s socialInfoDo) Where(conds ...gen.Condition) *socialInfoDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s socialInfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *socialInfoDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s socialInfoDo) Order(conds ...field.Expr) *socialInfoDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s socialInfoDo) Distinct(cols ...field.Expr) *socialInfoDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s socialInfoDo) Omit(cols ...field.Expr) *socialInfoDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s socialInfoDo) Join(table schema.Tabler, on ...field.Expr) *socialInfoDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s socialInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *socialInfoDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s socialInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) *socialInfoDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s socialInfoDo) Group(cols ...field.Expr) *socialInfoDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s socialInfoDo) Having(conds ...gen.Condition) *socialInfoDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s socialInfoDo) Limit(limit int) *socialInfoDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s socialInfoDo) Offset(offset int) *socialInfoDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s socialInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *socialInfoDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s socialInfoDo) Unscoped() *socialInfoDo {
	return s.withDO(s.DO.Unscoped())
}

func (s socialInfoDo) Create(values ...*model.SocialInfo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s socialInfoDo) CreateInBatches(values []*model.SocialInfo, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s socialInfoDo) Save(values ...*model.SocialInfo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s socialInfoDo) First() (*model.SocialInfo, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SocialInfo), nil
	}
}

func (s socialInfoDo) Take() (*model.SocialInfo, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SocialInfo), nil
	}
}

func (s socialInfoDo) Last() (*model.SocialInfo, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SocialInfo), nil
	}
}

func (s socialInfoDo) Find() ([]*model.SocialInfo, error) {
	result, err := s.DO.Find()
	return result.([]*model.SocialInfo), err
}

func (s socialInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SocialInfo, err error) {
	buf := make([]*model.SocialInfo, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s socialInfoDo) FindInBatches(result *[]*model.SocialInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s socialInfoDo) Attrs(attrs ...field.AssignExpr) *socialInfoDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s socialInfoDo) Assign(attrs ...field.AssignExpr) *socialInfoDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s socialInfoDo) Joins(field field.RelationField) *socialInfoDo {
	return s.withDO(s.DO.Joins(field))
}

func (s socialInfoDo) Preload(field field.RelationField) *socialInfoDo {
	return s.withDO(s.DO.Preload(field))
}

func (s socialInfoDo) FirstOrInit() (*model.SocialInfo, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SocialInfo), nil
	}
}

func (s socialInfoDo) FirstOrCreate() (*model.SocialInfo, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SocialInfo), nil
	}
}

func (s socialInfoDo) FindByPage(offset int, limit int) (result []*model.SocialInfo, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s socialInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s *socialInfoDo) withDO(do gen.Dao) *socialInfoDo {
	s.DO = *do.(*gen.DO)
	return s
}
