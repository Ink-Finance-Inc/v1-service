// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"inkfinance.xyz/dal/model"
)

func newAuditReport(db *gorm.DB) auditReport {
	_auditReport := auditReport{}

	_auditReport.auditReportDo.UseDB(db)
	_auditReport.auditReportDo.UseModel(&model.AuditReport{})

	tableName := _auditReport.auditReportDo.TableName()
	_auditReport.ALL = field.NewField(tableName, "*")
	_auditReport.ID = field.NewInt32(tableName, "id")
	_auditReport.DaoAddress = field.NewString(tableName, "dao_address")
	_auditReport.ReportContent = field.NewField(tableName, "report_content")
	_auditReport.CreateTime = field.NewInt64(tableName, "create_time")
	_auditReport.UpdateTime = field.NewInt64(tableName, "update_time")
	_auditReport.OperatorAddress = field.NewString(tableName, "operator_address")
	_auditReport.BlockHeight = field.NewInt64(tableName, "block_height")

	_auditReport.fillFieldMap()

	return _auditReport
}

type auditReport struct {
	auditReportDo auditReportDo

	ALL             field.Field
	ID              field.Int32
	DaoAddress      field.String
	ReportContent   field.Field
	CreateTime      field.Int64
	UpdateTime      field.Int64
	OperatorAddress field.String
	BlockHeight     field.Int64

	fieldMap map[string]field.Expr
}

func (a auditReport) Table(newTableName string) *auditReport {
	a.auditReportDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a auditReport) As(alias string) *auditReport {
	a.auditReportDo.DO = *(a.auditReportDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *auditReport) updateTableName(table string) *auditReport {
	a.ALL = field.NewField(table, "*")
	a.ID = field.NewInt32(table, "id")
	a.DaoAddress = field.NewString(table, "dao_address")
	a.ReportContent = field.NewField(table, "report_content")
	a.CreateTime = field.NewInt64(table, "create_time")
	a.UpdateTime = field.NewInt64(table, "update_time")
	a.OperatorAddress = field.NewString(table, "operator_address")
	a.BlockHeight = field.NewInt64(table, "block_height")

	a.fillFieldMap()

	return a
}

func (a *auditReport) WithContext(ctx context.Context) *auditReportDo {
	return a.auditReportDo.WithContext(ctx)
}

func (a auditReport) TableName() string { return a.auditReportDo.TableName() }

func (a auditReport) Alias() string { return a.auditReportDo.Alias() }

func (a *auditReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *auditReport) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["id"] = a.ID
	a.fieldMap["dao_address"] = a.DaoAddress
	a.fieldMap["report_content"] = a.ReportContent
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["update_time"] = a.UpdateTime
	a.fieldMap["operator_address"] = a.OperatorAddress
	a.fieldMap["block_height"] = a.BlockHeight
}

func (a auditReport) clone(db *gorm.DB) auditReport {
	a.auditReportDo.ReplaceDB(db)
	return a
}

type auditReportDo struct{ gen.DO }

func (a auditReportDo) Debug() *auditReportDo {
	return a.withDO(a.DO.Debug())
}

func (a auditReportDo) WithContext(ctx context.Context) *auditReportDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a auditReportDo) Clauses(conds ...clause.Expression) *auditReportDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a auditReportDo) Returning(value interface{}, columns ...string) *auditReportDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a auditReportDo) Not(conds ...gen.Condition) *auditReportDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a auditReportDo) Or(conds ...gen.Condition) *auditReportDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a auditReportDo) Select(conds ...field.Expr) *auditReportDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a auditReportDo) Where(conds ...gen.Condition) *auditReportDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a auditReportDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *auditReportDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a auditReportDo) Order(conds ...field.Expr) *auditReportDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a auditReportDo) Distinct(cols ...field.Expr) *auditReportDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a auditReportDo) Omit(cols ...field.Expr) *auditReportDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a auditReportDo) Join(table schema.Tabler, on ...field.Expr) *auditReportDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a auditReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) *auditReportDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a auditReportDo) RightJoin(table schema.Tabler, on ...field.Expr) *auditReportDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a auditReportDo) Group(cols ...field.Expr) *auditReportDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a auditReportDo) Having(conds ...gen.Condition) *auditReportDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a auditReportDo) Limit(limit int) *auditReportDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a auditReportDo) Offset(offset int) *auditReportDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a auditReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *auditReportDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a auditReportDo) Unscoped() *auditReportDo {
	return a.withDO(a.DO.Unscoped())
}

func (a auditReportDo) Create(values ...*model.AuditReport) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a auditReportDo) CreateInBatches(values []*model.AuditReport, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a auditReportDo) Save(values ...*model.AuditReport) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a auditReportDo) First() (*model.AuditReport, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuditReport), nil
	}
}

func (a auditReportDo) Take() (*model.AuditReport, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuditReport), nil
	}
}

func (a auditReportDo) Last() (*model.AuditReport, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuditReport), nil
	}
}

func (a auditReportDo) Find() ([]*model.AuditReport, error) {
	result, err := a.DO.Find()
	return result.([]*model.AuditReport), err
}

func (a auditReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AuditReport, err error) {
	buf := make([]*model.AuditReport, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a auditReportDo) FindInBatches(result *[]*model.AuditReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a auditReportDo) Attrs(attrs ...field.AssignExpr) *auditReportDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a auditReportDo) Assign(attrs ...field.AssignExpr) *auditReportDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a auditReportDo) Joins(field field.RelationField) *auditReportDo {
	return a.withDO(a.DO.Joins(field))
}

func (a auditReportDo) Preload(field field.RelationField) *auditReportDo {
	return a.withDO(a.DO.Preload(field))
}

func (a auditReportDo) FirstOrInit() (*model.AuditReport, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuditReport), nil
	}
}

func (a auditReportDo) FirstOrCreate() (*model.AuditReport, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuditReport), nil
	}
}

func (a auditReportDo) FindByPage(offset int, limit int) (result []*model.AuditReport, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a auditReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a *auditReportDo) withDO(do gen.Dao) *auditReportDo {
	a.DO = *do.(*gen.DO)
	return a
}
