// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"inkfinance.xyz/dal/model"
)

func newDaoInfo(db *gorm.DB) daoInfo {
	_daoInfo := daoInfo{}

	_daoInfo.daoInfoDo.UseDB(db)
	_daoInfo.daoInfoDo.UseModel(&model.DaoInfo{})

	tableName := _daoInfo.daoInfoDo.TableName()
	_daoInfo.ALL = field.NewField(tableName, "*")
	_daoInfo.ID = field.NewInt32(tableName, "id")
	_daoInfo.DaoAddress = field.NewString(tableName, "dao_address")
	_daoInfo.DaoLogo = field.NewString(tableName, "dao_logo")

	_daoInfo.fillFieldMap()

	return _daoInfo
}

type daoInfo struct {
	daoInfoDo daoInfoDo

	ALL        field.Field
	ID         field.Int32
	DaoAddress field.String
	DaoLogo    field.String

	fieldMap map[string]field.Expr
}

func (d daoInfo) Table(newTableName string) *daoInfo {
	d.daoInfoDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d daoInfo) As(alias string) *daoInfo {
	d.daoInfoDo.DO = *(d.daoInfoDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *daoInfo) updateTableName(table string) *daoInfo {
	d.ALL = field.NewField(table, "*")
	d.ID = field.NewInt32(table, "id")
	d.DaoAddress = field.NewString(table, "dao_address")
	d.DaoLogo = field.NewString(table, "dao_logo")

	d.fillFieldMap()

	return d
}

func (d *daoInfo) WithContext(ctx context.Context) *daoInfoDo { return d.daoInfoDo.WithContext(ctx) }

func (d daoInfo) TableName() string { return d.daoInfoDo.TableName() }

func (d daoInfo) Alias() string { return d.daoInfoDo.Alias() }

func (d *daoInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *daoInfo) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 3)
	d.fieldMap["id"] = d.ID
	d.fieldMap["dao_address"] = d.DaoAddress
	d.fieldMap["dao_logo"] = d.DaoLogo
}

func (d daoInfo) clone(db *gorm.DB) daoInfo {
	d.daoInfoDo.ReplaceDB(db)
	return d
}

type daoInfoDo struct{ gen.DO }

func (d daoInfoDo) Debug() *daoInfoDo {
	return d.withDO(d.DO.Debug())
}

func (d daoInfoDo) WithContext(ctx context.Context) *daoInfoDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d daoInfoDo) Clauses(conds ...clause.Expression) *daoInfoDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d daoInfoDo) Returning(value interface{}, columns ...string) *daoInfoDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d daoInfoDo) Not(conds ...gen.Condition) *daoInfoDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d daoInfoDo) Or(conds ...gen.Condition) *daoInfoDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d daoInfoDo) Select(conds ...field.Expr) *daoInfoDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d daoInfoDo) Where(conds ...gen.Condition) *daoInfoDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d daoInfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *daoInfoDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d daoInfoDo) Order(conds ...field.Expr) *daoInfoDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d daoInfoDo) Distinct(cols ...field.Expr) *daoInfoDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d daoInfoDo) Omit(cols ...field.Expr) *daoInfoDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d daoInfoDo) Join(table schema.Tabler, on ...field.Expr) *daoInfoDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d daoInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *daoInfoDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d daoInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) *daoInfoDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d daoInfoDo) Group(cols ...field.Expr) *daoInfoDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d daoInfoDo) Having(conds ...gen.Condition) *daoInfoDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d daoInfoDo) Limit(limit int) *daoInfoDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d daoInfoDo) Offset(offset int) *daoInfoDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d daoInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *daoInfoDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d daoInfoDo) Unscoped() *daoInfoDo {
	return d.withDO(d.DO.Unscoped())
}

func (d daoInfoDo) Create(values ...*model.DaoInfo) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d daoInfoDo) CreateInBatches(values []*model.DaoInfo, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d daoInfoDo) Save(values ...*model.DaoInfo) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d daoInfoDo) First() (*model.DaoInfo, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DaoInfo), nil
	}
}

func (d daoInfoDo) Take() (*model.DaoInfo, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DaoInfo), nil
	}
}

func (d daoInfoDo) Last() (*model.DaoInfo, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DaoInfo), nil
	}
}

func (d daoInfoDo) Find() ([]*model.DaoInfo, error) {
	result, err := d.DO.Find()
	return result.([]*model.DaoInfo), err
}

func (d daoInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DaoInfo, err error) {
	buf := make([]*model.DaoInfo, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d daoInfoDo) FindInBatches(result *[]*model.DaoInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d daoInfoDo) Attrs(attrs ...field.AssignExpr) *daoInfoDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d daoInfoDo) Assign(attrs ...field.AssignExpr) *daoInfoDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d daoInfoDo) Joins(field field.RelationField) *daoInfoDo {
	return d.withDO(d.DO.Joins(field))
}

func (d daoInfoDo) Preload(field field.RelationField) *daoInfoDo {
	return d.withDO(d.DO.Preload(field))
}

func (d daoInfoDo) FirstOrInit() (*model.DaoInfo, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DaoInfo), nil
	}
}

func (d daoInfoDo) FirstOrCreate() (*model.DaoInfo, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DaoInfo), nil
	}
}

func (d daoInfoDo) FindByPage(offset int, limit int) (result []*model.DaoInfo, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d daoInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d *daoInfoDo) withDO(do gen.Dao) *daoInfoDo {
	d.DO = *do.(*gen.DO)
	return d
}
