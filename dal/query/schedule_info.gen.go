// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"inkfinance.xyz/dal/model"
)

func newScheduleInfo(db *gorm.DB) scheduleInfo {
	_scheduleInfo := scheduleInfo{}

	_scheduleInfo.scheduleInfoDo.UseDB(db)
	_scheduleInfo.scheduleInfoDo.UseModel(&model.ScheduleInfo{})

	tableName := _scheduleInfo.scheduleInfoDo.TableName()
	_scheduleInfo.ALL = field.NewField(tableName, "*")
	_scheduleInfo.ID = field.NewInt32(tableName, "id")
	_scheduleInfo.ScheduleID = field.NewInt32(tableName, "schedule_id")
	_scheduleInfo.Duration = field.NewInt64(tableName, "duration")
	_scheduleInfo.ScheduleTimes = field.NewInt64(tableName, "schedule_times")
	_scheduleInfo.StartTime = field.NewInt64(tableName, "start_time")
	_scheduleInfo.CreateTime = field.NewTime(tableName, "create_time")
	_scheduleInfo.DaoAddress = field.NewString(tableName, "dao_address")

	_scheduleInfo.fillFieldMap()

	return _scheduleInfo
}

type scheduleInfo struct {
	scheduleInfoDo scheduleInfoDo

	ALL           field.Field
	ID            field.Int32
	ScheduleID    field.Int32
	Duration      field.Int64
	ScheduleTimes field.Int64
	StartTime     field.Int64
	CreateTime    field.Time
	DaoAddress    field.String

	fieldMap map[string]field.Expr
}

func (s scheduleInfo) Table(newTableName string) *scheduleInfo {
	s.scheduleInfoDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scheduleInfo) As(alias string) *scheduleInfo {
	s.scheduleInfoDo.DO = *(s.scheduleInfoDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scheduleInfo) updateTableName(table string) *scheduleInfo {
	s.ALL = field.NewField(table, "*")
	s.ID = field.NewInt32(table, "id")
	s.ScheduleID = field.NewInt32(table, "schedule_id")
	s.Duration = field.NewInt64(table, "duration")
	s.ScheduleTimes = field.NewInt64(table, "schedule_times")
	s.StartTime = field.NewInt64(table, "start_time")
	s.CreateTime = field.NewTime(table, "create_time")
	s.DaoAddress = field.NewString(table, "dao_address")

	s.fillFieldMap()

	return s
}

func (s *scheduleInfo) WithContext(ctx context.Context) *scheduleInfoDo {
	return s.scheduleInfoDo.WithContext(ctx)
}

func (s scheduleInfo) TableName() string { return s.scheduleInfoDo.TableName() }

func (s scheduleInfo) Alias() string { return s.scheduleInfoDo.Alias() }

func (s *scheduleInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scheduleInfo) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["schedule_id"] = s.ScheduleID
	s.fieldMap["duration"] = s.Duration
	s.fieldMap["schedule_times"] = s.ScheduleTimes
	s.fieldMap["start_time"] = s.StartTime
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["dao_address"] = s.DaoAddress
}

func (s scheduleInfo) clone(db *gorm.DB) scheduleInfo {
	s.scheduleInfoDo.ReplaceDB(db)
	return s
}

type scheduleInfoDo struct{ gen.DO }

func (s scheduleInfoDo) Debug() *scheduleInfoDo {
	return s.withDO(s.DO.Debug())
}

func (s scheduleInfoDo) WithContext(ctx context.Context) *scheduleInfoDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scheduleInfoDo) Clauses(conds ...clause.Expression) *scheduleInfoDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scheduleInfoDo) Returning(value interface{}, columns ...string) *scheduleInfoDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scheduleInfoDo) Not(conds ...gen.Condition) *scheduleInfoDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scheduleInfoDo) Or(conds ...gen.Condition) *scheduleInfoDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scheduleInfoDo) Select(conds ...field.Expr) *scheduleInfoDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scheduleInfoDo) Where(conds ...gen.Condition) *scheduleInfoDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scheduleInfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *scheduleInfoDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s scheduleInfoDo) Order(conds ...field.Expr) *scheduleInfoDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scheduleInfoDo) Distinct(cols ...field.Expr) *scheduleInfoDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scheduleInfoDo) Omit(cols ...field.Expr) *scheduleInfoDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scheduleInfoDo) Join(table schema.Tabler, on ...field.Expr) *scheduleInfoDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scheduleInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *scheduleInfoDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scheduleInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) *scheduleInfoDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scheduleInfoDo) Group(cols ...field.Expr) *scheduleInfoDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scheduleInfoDo) Having(conds ...gen.Condition) *scheduleInfoDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scheduleInfoDo) Limit(limit int) *scheduleInfoDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scheduleInfoDo) Offset(offset int) *scheduleInfoDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scheduleInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *scheduleInfoDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scheduleInfoDo) Unscoped() *scheduleInfoDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scheduleInfoDo) Create(values ...*model.ScheduleInfo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scheduleInfoDo) CreateInBatches(values []*model.ScheduleInfo, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scheduleInfoDo) Save(values ...*model.ScheduleInfo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scheduleInfoDo) First() (*model.ScheduleInfo, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScheduleInfo), nil
	}
}

func (s scheduleInfoDo) Take() (*model.ScheduleInfo, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScheduleInfo), nil
	}
}

func (s scheduleInfoDo) Last() (*model.ScheduleInfo, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScheduleInfo), nil
	}
}

func (s scheduleInfoDo) Find() ([]*model.ScheduleInfo, error) {
	result, err := s.DO.Find()
	return result.([]*model.ScheduleInfo), err
}

func (s scheduleInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScheduleInfo, err error) {
	buf := make([]*model.ScheduleInfo, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scheduleInfoDo) FindInBatches(result *[]*model.ScheduleInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scheduleInfoDo) Attrs(attrs ...field.AssignExpr) *scheduleInfoDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scheduleInfoDo) Assign(attrs ...field.AssignExpr) *scheduleInfoDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scheduleInfoDo) Joins(field field.RelationField) *scheduleInfoDo {
	return s.withDO(s.DO.Joins(field))
}

func (s scheduleInfoDo) Preload(field field.RelationField) *scheduleInfoDo {
	return s.withDO(s.DO.Preload(field))
}

func (s scheduleInfoDo) FirstOrInit() (*model.ScheduleInfo, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScheduleInfo), nil
	}
}

func (s scheduleInfoDo) FirstOrCreate() (*model.ScheduleInfo, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScheduleInfo), nil
	}
}

func (s scheduleInfoDo) FindByPage(offset int, limit int) (result []*model.ScheduleInfo, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scheduleInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s *scheduleInfoDo) withDO(do gen.Dao) *scheduleInfoDo {
	s.DO = *do.(*gen.DO)
	return s
}
