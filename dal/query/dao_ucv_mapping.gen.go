// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"inkfinance.xyz/dal/model"
)

func newDaoUcvMapping(db *gorm.DB) daoUcvMapping {
	_daoUcvMapping := daoUcvMapping{}

	_daoUcvMapping.daoUcvMappingDo.UseDB(db)
	_daoUcvMapping.daoUcvMappingDo.UseModel(&model.DaoUcvMapping{})

	tableName := _daoUcvMapping.daoUcvMappingDo.TableName()
	_daoUcvMapping.ALL = field.NewField(tableName, "*")
	_daoUcvMapping.ID = field.NewInt32(tableName, "id")
	_daoUcvMapping.DaoAddress = field.NewString(tableName, "dao_address")
	_daoUcvMapping.UcvAddress = field.NewString(tableName, "ucv_address")
	_daoUcvMapping.CreateTime = field.NewTime(tableName, "create_time")
	_daoUcvMapping.Valid = field.NewInt32(tableName, "valid")

	_daoUcvMapping.fillFieldMap()

	return _daoUcvMapping
}

type daoUcvMapping struct {
	daoUcvMappingDo daoUcvMappingDo

	ALL        field.Field
	ID         field.Int32
	DaoAddress field.String
	UcvAddress field.String
	CreateTime field.Time
	Valid      field.Int32

	fieldMap map[string]field.Expr
}

func (d daoUcvMapping) Table(newTableName string) *daoUcvMapping {
	d.daoUcvMappingDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d daoUcvMapping) As(alias string) *daoUcvMapping {
	d.daoUcvMappingDo.DO = *(d.daoUcvMappingDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *daoUcvMapping) updateTableName(table string) *daoUcvMapping {
	d.ALL = field.NewField(table, "*")
	d.ID = field.NewInt32(table, "id")
	d.DaoAddress = field.NewString(table, "dao_address")
	d.UcvAddress = field.NewString(table, "ucv_address")
	d.CreateTime = field.NewTime(table, "create_time")
	d.Valid = field.NewInt32(table, "valid")

	d.fillFieldMap()

	return d
}

func (d *daoUcvMapping) WithContext(ctx context.Context) *daoUcvMappingDo {
	return d.daoUcvMappingDo.WithContext(ctx)
}

func (d daoUcvMapping) TableName() string { return d.daoUcvMappingDo.TableName() }

func (d daoUcvMapping) Alias() string { return d.daoUcvMappingDo.Alias() }

func (d *daoUcvMapping) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *daoUcvMapping) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 5)
	d.fieldMap["id"] = d.ID
	d.fieldMap["dao_address"] = d.DaoAddress
	d.fieldMap["ucv_address"] = d.UcvAddress
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["valid"] = d.Valid
}

func (d daoUcvMapping) clone(db *gorm.DB) daoUcvMapping {
	d.daoUcvMappingDo.ReplaceDB(db)
	return d
}

type daoUcvMappingDo struct{ gen.DO }

func (d daoUcvMappingDo) Debug() *daoUcvMappingDo {
	return d.withDO(d.DO.Debug())
}

func (d daoUcvMappingDo) WithContext(ctx context.Context) *daoUcvMappingDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d daoUcvMappingDo) Clauses(conds ...clause.Expression) *daoUcvMappingDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d daoUcvMappingDo) Returning(value interface{}, columns ...string) *daoUcvMappingDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d daoUcvMappingDo) Not(conds ...gen.Condition) *daoUcvMappingDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d daoUcvMappingDo) Or(conds ...gen.Condition) *daoUcvMappingDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d daoUcvMappingDo) Select(conds ...field.Expr) *daoUcvMappingDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d daoUcvMappingDo) Where(conds ...gen.Condition) *daoUcvMappingDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d daoUcvMappingDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *daoUcvMappingDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d daoUcvMappingDo) Order(conds ...field.Expr) *daoUcvMappingDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d daoUcvMappingDo) Distinct(cols ...field.Expr) *daoUcvMappingDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d daoUcvMappingDo) Omit(cols ...field.Expr) *daoUcvMappingDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d daoUcvMappingDo) Join(table schema.Tabler, on ...field.Expr) *daoUcvMappingDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d daoUcvMappingDo) LeftJoin(table schema.Tabler, on ...field.Expr) *daoUcvMappingDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d daoUcvMappingDo) RightJoin(table schema.Tabler, on ...field.Expr) *daoUcvMappingDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d daoUcvMappingDo) Group(cols ...field.Expr) *daoUcvMappingDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d daoUcvMappingDo) Having(conds ...gen.Condition) *daoUcvMappingDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d daoUcvMappingDo) Limit(limit int) *daoUcvMappingDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d daoUcvMappingDo) Offset(offset int) *daoUcvMappingDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d daoUcvMappingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *daoUcvMappingDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d daoUcvMappingDo) Unscoped() *daoUcvMappingDo {
	return d.withDO(d.DO.Unscoped())
}

func (d daoUcvMappingDo) Create(values ...*model.DaoUcvMapping) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d daoUcvMappingDo) CreateInBatches(values []*model.DaoUcvMapping, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d daoUcvMappingDo) Save(values ...*model.DaoUcvMapping) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d daoUcvMappingDo) First() (*model.DaoUcvMapping, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DaoUcvMapping), nil
	}
}

func (d daoUcvMappingDo) Take() (*model.DaoUcvMapping, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DaoUcvMapping), nil
	}
}

func (d daoUcvMappingDo) Last() (*model.DaoUcvMapping, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DaoUcvMapping), nil
	}
}

func (d daoUcvMappingDo) Find() ([]*model.DaoUcvMapping, error) {
	result, err := d.DO.Find()
	return result.([]*model.DaoUcvMapping), err
}

func (d daoUcvMappingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DaoUcvMapping, err error) {
	buf := make([]*model.DaoUcvMapping, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d daoUcvMappingDo) FindInBatches(result *[]*model.DaoUcvMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d daoUcvMappingDo) Attrs(attrs ...field.AssignExpr) *daoUcvMappingDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d daoUcvMappingDo) Assign(attrs ...field.AssignExpr) *daoUcvMappingDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d daoUcvMappingDo) Joins(field field.RelationField) *daoUcvMappingDo {
	return d.withDO(d.DO.Joins(field))
}

func (d daoUcvMappingDo) Preload(field field.RelationField) *daoUcvMappingDo {
	return d.withDO(d.DO.Preload(field))
}

func (d daoUcvMappingDo) FirstOrInit() (*model.DaoUcvMapping, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DaoUcvMapping), nil
	}
}

func (d daoUcvMappingDo) FirstOrCreate() (*model.DaoUcvMapping, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DaoUcvMapping), nil
	}
}

func (d daoUcvMappingDo) FindByPage(offset int, limit int) (result []*model.DaoUcvMapping, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d daoUcvMappingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d *daoUcvMappingDo) withDO(do gen.Dao) *daoUcvMappingDo {
	d.DO = *do.(*gen.DO)
	return d
}
