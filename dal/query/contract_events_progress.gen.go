// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"inkfinance.xyz/dal/model"
)

func newContractEventsProgress(db *gorm.DB) contractEventsProgress {
	_contractEventsProgress := contractEventsProgress{}

	_contractEventsProgress.contractEventsProgressDo.UseDB(db)
	_contractEventsProgress.contractEventsProgressDo.UseModel(&model.ContractEventsProgress{})

	tableName := _contractEventsProgress.contractEventsProgressDo.TableName()
	_contractEventsProgress.ALL = field.NewField(tableName, "*")
	_contractEventsProgress.ID = field.NewInt32(tableName, "id")
	_contractEventsProgress.ContractAddress = field.NewString(tableName, "contract_address")
	_contractEventsProgress.Events = field.NewString(tableName, "events")
	_contractEventsProgress.StartHeight = field.NewInt64(tableName, "start_height")
	_contractEventsProgress.CurrentHeight = field.NewInt64(tableName, "current_height")
	_contractEventsProgress.Valid = field.NewInt32(tableName, "valid")
	_contractEventsProgress.UpdateTime = field.NewTime(tableName, "update_time")
	_contractEventsProgress.Comments = field.NewString(tableName, "comments")

	_contractEventsProgress.fillFieldMap()

	return _contractEventsProgress
}

type contractEventsProgress struct {
	contractEventsProgressDo contractEventsProgressDo

	ALL             field.Field
	ID              field.Int32
	ContractAddress field.String
	Events          field.String
	StartHeight     field.Int64
	CurrentHeight   field.Int64
	Valid           field.Int32
	UpdateTime      field.Time
	Comments        field.String

	fieldMap map[string]field.Expr
}

func (c contractEventsProgress) Table(newTableName string) *contractEventsProgress {
	c.contractEventsProgressDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c contractEventsProgress) As(alias string) *contractEventsProgress {
	c.contractEventsProgressDo.DO = *(c.contractEventsProgressDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *contractEventsProgress) updateTableName(table string) *contractEventsProgress {
	c.ALL = field.NewField(table, "*")
	c.ID = field.NewInt32(table, "id")
	c.ContractAddress = field.NewString(table, "contract_address")
	c.Events = field.NewString(table, "events")
	c.StartHeight = field.NewInt64(table, "start_height")
	c.CurrentHeight = field.NewInt64(table, "current_height")
	c.Valid = field.NewInt32(table, "valid")
	c.UpdateTime = field.NewTime(table, "update_time")
	c.Comments = field.NewString(table, "comments")

	c.fillFieldMap()

	return c
}

func (c *contractEventsProgress) WithContext(ctx context.Context) *contractEventsProgressDo {
	return c.contractEventsProgressDo.WithContext(ctx)
}

func (c contractEventsProgress) TableName() string { return c.contractEventsProgressDo.TableName() }

func (c contractEventsProgress) Alias() string { return c.contractEventsProgressDo.Alias() }

func (c *contractEventsProgress) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *contractEventsProgress) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 8)
	c.fieldMap["id"] = c.ID
	c.fieldMap["contract_address"] = c.ContractAddress
	c.fieldMap["events"] = c.Events
	c.fieldMap["start_height"] = c.StartHeight
	c.fieldMap["current_height"] = c.CurrentHeight
	c.fieldMap["valid"] = c.Valid
	c.fieldMap["update_time"] = c.UpdateTime
	c.fieldMap["comments"] = c.Comments
}

func (c contractEventsProgress) clone(db *gorm.DB) contractEventsProgress {
	c.contractEventsProgressDo.ReplaceDB(db)
	return c
}

type contractEventsProgressDo struct{ gen.DO }

func (c contractEventsProgressDo) Debug() *contractEventsProgressDo {
	return c.withDO(c.DO.Debug())
}

func (c contractEventsProgressDo) WithContext(ctx context.Context) *contractEventsProgressDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c contractEventsProgressDo) Clauses(conds ...clause.Expression) *contractEventsProgressDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c contractEventsProgressDo) Returning(value interface{}, columns ...string) *contractEventsProgressDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c contractEventsProgressDo) Not(conds ...gen.Condition) *contractEventsProgressDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c contractEventsProgressDo) Or(conds ...gen.Condition) *contractEventsProgressDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c contractEventsProgressDo) Select(conds ...field.Expr) *contractEventsProgressDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c contractEventsProgressDo) Where(conds ...gen.Condition) *contractEventsProgressDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c contractEventsProgressDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *contractEventsProgressDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c contractEventsProgressDo) Order(conds ...field.Expr) *contractEventsProgressDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c contractEventsProgressDo) Distinct(cols ...field.Expr) *contractEventsProgressDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c contractEventsProgressDo) Omit(cols ...field.Expr) *contractEventsProgressDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c contractEventsProgressDo) Join(table schema.Tabler, on ...field.Expr) *contractEventsProgressDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c contractEventsProgressDo) LeftJoin(table schema.Tabler, on ...field.Expr) *contractEventsProgressDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c contractEventsProgressDo) RightJoin(table schema.Tabler, on ...field.Expr) *contractEventsProgressDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c contractEventsProgressDo) Group(cols ...field.Expr) *contractEventsProgressDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c contractEventsProgressDo) Having(conds ...gen.Condition) *contractEventsProgressDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c contractEventsProgressDo) Limit(limit int) *contractEventsProgressDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c contractEventsProgressDo) Offset(offset int) *contractEventsProgressDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c contractEventsProgressDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *contractEventsProgressDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c contractEventsProgressDo) Unscoped() *contractEventsProgressDo {
	return c.withDO(c.DO.Unscoped())
}

func (c contractEventsProgressDo) Create(values ...*model.ContractEventsProgress) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c contractEventsProgressDo) CreateInBatches(values []*model.ContractEventsProgress, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c contractEventsProgressDo) Save(values ...*model.ContractEventsProgress) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c contractEventsProgressDo) First() (*model.ContractEventsProgress, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ContractEventsProgress), nil
	}
}

func (c contractEventsProgressDo) Take() (*model.ContractEventsProgress, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ContractEventsProgress), nil
	}
}

func (c contractEventsProgressDo) Last() (*model.ContractEventsProgress, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ContractEventsProgress), nil
	}
}

func (c contractEventsProgressDo) Find() ([]*model.ContractEventsProgress, error) {
	result, err := c.DO.Find()
	return result.([]*model.ContractEventsProgress), err
}

func (c contractEventsProgressDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ContractEventsProgress, err error) {
	buf := make([]*model.ContractEventsProgress, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c contractEventsProgressDo) FindInBatches(result *[]*model.ContractEventsProgress, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c contractEventsProgressDo) Attrs(attrs ...field.AssignExpr) *contractEventsProgressDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c contractEventsProgressDo) Assign(attrs ...field.AssignExpr) *contractEventsProgressDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c contractEventsProgressDo) Joins(field field.RelationField) *contractEventsProgressDo {
	return c.withDO(c.DO.Joins(field))
}

func (c contractEventsProgressDo) Preload(field field.RelationField) *contractEventsProgressDo {
	return c.withDO(c.DO.Preload(field))
}

func (c contractEventsProgressDo) FirstOrInit() (*model.ContractEventsProgress, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ContractEventsProgress), nil
	}
}

func (c contractEventsProgressDo) FirstOrCreate() (*model.ContractEventsProgress, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ContractEventsProgress), nil
	}
}

func (c contractEventsProgressDo) FindByPage(offset int, limit int) (result []*model.ContractEventsProgress, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c contractEventsProgressDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c *contractEventsProgressDo) withDO(do gen.Dao) *contractEventsProgressDo {
	c.DO = *do.(*gen.DO)
	return c
}
