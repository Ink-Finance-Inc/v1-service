// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"inkfinance.xyz/dal/model"
)

func newScheduleSignedInfo(db *gorm.DB) scheduleSignedInfo {
	_scheduleSignedInfo := scheduleSignedInfo{}

	_scheduleSignedInfo.scheduleSignedInfoDo.UseDB(db)
	_scheduleSignedInfo.scheduleSignedInfoDo.UseModel(&model.ScheduleSignedInfo{})

	tableName := _scheduleSignedInfo.scheduleSignedInfoDo.TableName()
	_scheduleSignedInfo.ALL = field.NewField(tableName, "*")
	_scheduleSignedInfo.ID = field.NewInt32(tableName, "id")
	_scheduleSignedInfo.ScheduleID = field.NewInt32(tableName, "schedule_id")
	_scheduleSignedInfo.TimeID = field.NewInt32(tableName, "time_id")
	_scheduleSignedInfo.SignAddress = field.NewString(tableName, "sign_address")
	_scheduleSignedInfo.CreateTime = field.NewTime(tableName, "create_time")
	_scheduleSignedInfo.DaoAddress = field.NewString(tableName, "dao_address")
	_scheduleSignedInfo.BlockTime = field.NewInt64(tableName, "block_time")

	_scheduleSignedInfo.fillFieldMap()

	return _scheduleSignedInfo
}

type scheduleSignedInfo struct {
	scheduleSignedInfoDo scheduleSignedInfoDo

	ALL         field.Field
	ID          field.Int32
	ScheduleID  field.Int32
	TimeID      field.Int32
	SignAddress field.String
	CreateTime  field.Time
	DaoAddress  field.String
	BlockTime   field.Int64

	fieldMap map[string]field.Expr
}

func (s scheduleSignedInfo) Table(newTableName string) *scheduleSignedInfo {
	s.scheduleSignedInfoDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scheduleSignedInfo) As(alias string) *scheduleSignedInfo {
	s.scheduleSignedInfoDo.DO = *(s.scheduleSignedInfoDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scheduleSignedInfo) updateTableName(table string) *scheduleSignedInfo {
	s.ALL = field.NewField(table, "*")
	s.ID = field.NewInt32(table, "id")
	s.ScheduleID = field.NewInt32(table, "schedule_id")
	s.TimeID = field.NewInt32(table, "time_id")
	s.SignAddress = field.NewString(table, "sign_address")
	s.CreateTime = field.NewTime(table, "create_time")
	s.DaoAddress = field.NewString(table, "dao_address")
	s.BlockTime = field.NewInt64(table, "block_time")

	s.fillFieldMap()

	return s
}

func (s *scheduleSignedInfo) WithContext(ctx context.Context) *scheduleSignedInfoDo {
	return s.scheduleSignedInfoDo.WithContext(ctx)
}

func (s scheduleSignedInfo) TableName() string { return s.scheduleSignedInfoDo.TableName() }

func (s scheduleSignedInfo) Alias() string { return s.scheduleSignedInfoDo.Alias() }

func (s *scheduleSignedInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scheduleSignedInfo) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["schedule_id"] = s.ScheduleID
	s.fieldMap["time_id"] = s.TimeID
	s.fieldMap["sign_address"] = s.SignAddress
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["dao_address"] = s.DaoAddress
	s.fieldMap["block_time"] = s.BlockTime
}

func (s scheduleSignedInfo) clone(db *gorm.DB) scheduleSignedInfo {
	s.scheduleSignedInfoDo.ReplaceDB(db)
	return s
}

type scheduleSignedInfoDo struct{ gen.DO }

func (s scheduleSignedInfoDo) Debug() *scheduleSignedInfoDo {
	return s.withDO(s.DO.Debug())
}

func (s scheduleSignedInfoDo) WithContext(ctx context.Context) *scheduleSignedInfoDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scheduleSignedInfoDo) Clauses(conds ...clause.Expression) *scheduleSignedInfoDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scheduleSignedInfoDo) Returning(value interface{}, columns ...string) *scheduleSignedInfoDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scheduleSignedInfoDo) Not(conds ...gen.Condition) *scheduleSignedInfoDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scheduleSignedInfoDo) Or(conds ...gen.Condition) *scheduleSignedInfoDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scheduleSignedInfoDo) Select(conds ...field.Expr) *scheduleSignedInfoDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scheduleSignedInfoDo) Where(conds ...gen.Condition) *scheduleSignedInfoDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scheduleSignedInfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *scheduleSignedInfoDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s scheduleSignedInfoDo) Order(conds ...field.Expr) *scheduleSignedInfoDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scheduleSignedInfoDo) Distinct(cols ...field.Expr) *scheduleSignedInfoDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scheduleSignedInfoDo) Omit(cols ...field.Expr) *scheduleSignedInfoDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scheduleSignedInfoDo) Join(table schema.Tabler, on ...field.Expr) *scheduleSignedInfoDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scheduleSignedInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *scheduleSignedInfoDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scheduleSignedInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) *scheduleSignedInfoDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scheduleSignedInfoDo) Group(cols ...field.Expr) *scheduleSignedInfoDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scheduleSignedInfoDo) Having(conds ...gen.Condition) *scheduleSignedInfoDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scheduleSignedInfoDo) Limit(limit int) *scheduleSignedInfoDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scheduleSignedInfoDo) Offset(offset int) *scheduleSignedInfoDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scheduleSignedInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *scheduleSignedInfoDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scheduleSignedInfoDo) Unscoped() *scheduleSignedInfoDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scheduleSignedInfoDo) Create(values ...*model.ScheduleSignedInfo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scheduleSignedInfoDo) CreateInBatches(values []*model.ScheduleSignedInfo, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scheduleSignedInfoDo) Save(values ...*model.ScheduleSignedInfo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scheduleSignedInfoDo) First() (*model.ScheduleSignedInfo, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScheduleSignedInfo), nil
	}
}

func (s scheduleSignedInfoDo) Take() (*model.ScheduleSignedInfo, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScheduleSignedInfo), nil
	}
}

func (s scheduleSignedInfoDo) Last() (*model.ScheduleSignedInfo, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScheduleSignedInfo), nil
	}
}

func (s scheduleSignedInfoDo) Find() ([]*model.ScheduleSignedInfo, error) {
	result, err := s.DO.Find()
	return result.([]*model.ScheduleSignedInfo), err
}

func (s scheduleSignedInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScheduleSignedInfo, err error) {
	buf := make([]*model.ScheduleSignedInfo, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scheduleSignedInfoDo) FindInBatches(result *[]*model.ScheduleSignedInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scheduleSignedInfoDo) Attrs(attrs ...field.AssignExpr) *scheduleSignedInfoDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scheduleSignedInfoDo) Assign(attrs ...field.AssignExpr) *scheduleSignedInfoDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scheduleSignedInfoDo) Joins(field field.RelationField) *scheduleSignedInfoDo {
	return s.withDO(s.DO.Joins(field))
}

func (s scheduleSignedInfoDo) Preload(field field.RelationField) *scheduleSignedInfoDo {
	return s.withDO(s.DO.Preload(field))
}

func (s scheduleSignedInfoDo) FirstOrInit() (*model.ScheduleSignedInfo, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScheduleSignedInfo), nil
	}
}

func (s scheduleSignedInfoDo) FirstOrCreate() (*model.ScheduleSignedInfo, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScheduleSignedInfo), nil
	}
}

func (s scheduleSignedInfoDo) FindByPage(offset int, limit int) (result []*model.ScheduleSignedInfo, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scheduleSignedInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s *scheduleSignedInfoDo) withDO(do gen.Dao) *scheduleSignedInfoDo {
	s.DO = *do.(*gen.DO)
	return s
}
